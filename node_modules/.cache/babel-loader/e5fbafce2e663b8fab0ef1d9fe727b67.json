{"ast":null,"code":"var _jsxFileName = \"/Users/gab/Desktop/Projects/tutorial/quizz/src/components/slide.js\";\nimport { React, useState } from \"react\";\nimport Results from \"./results\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Slide = ({\n  data,\n  currentSlide,\n  updateAnswerx\n}) => {\n  const [userAnswer, setUserAnswer] = useState(data);\n  console.log(updateAnswerx);\n\n  if (data.length === currentSlide) {\n    return /*#__PURE__*/_jsxDEV(Results, {\n      data: userAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n\n  const {\n    answers,\n    question\n  } = data[currentSlide];\n\n  const Answers = () => {\n    const updateAnswer = index => {\n      const newObj = [...data];\n      data[currentSlide].answer = index;\n      setUserAnswer(newObj);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `choice ${userAnswer[currentSlide].answer === index ? \"selected\" : \"\"}`,\n        onClick: () => updateAnswer(index),\n        children: answer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slide\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Answers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Slide;","map":{"version":3,"sources":["/Users/gab/Desktop/Projects/tutorial/quizz/src/components/slide.js"],"names":["React","useState","Results","Slide","data","currentSlide","updateAnswerx","userAnswer","setUserAnswer","console","log","length","answers","question","Answers","updateAnswer","index","newObj","answer","map"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA;AAAtB,CAAD,KAA2C;AACvD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAACG,IAAD,CAA5C;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;;AACA,MAAIF,IAAI,CAACO,MAAL,KAAgBN,YAApB,EAAkC;AAChC,wBAAO,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEE;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAwBT,IAAI,CAACC,YAAD,CAAlC;;AAEA,QAAMS,OAAO,GAAG,MAAM;AACpB,UAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,YAAMC,MAAM,GAAG,CAAC,GAAGb,IAAJ,CAAf;AACAA,MAAAA,IAAI,CAACC,YAAD,CAAJ,CAAmBa,MAAnB,GAA4BF,KAA5B;AACAR,MAAAA,aAAa,CAACS,MAAD,CAAb;AACD,KAJD;;AAMA,wBACE;AAAA,gBACGL,OAAO,CAACO,GAAR,CAAY,CAACD,MAAD,EAASF,KAAT,kBACX;AACE,QAAA,SAAS,EAAG,UACVT,UAAU,CAACF,YAAD,CAAV,CAAyBa,MAAzB,KAAoCF,KAApC,GAA4C,UAA5C,GAAyD,EAC1D,EAHH;AAIE,QAAA,OAAO,EAAE,MAAMD,YAAY,CAACC,KAAD,CAJ7B;AAAA,kBAOGE;AAPH,SAKOF,KALP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAeD,GAtBD;;AAwBA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvCD;;AAyCA,eAAeV,KAAf","sourcesContent":["import { React, useState } from \"react\";\nimport Results from \"./results\";\n\nconst Slide = ({ data, currentSlide, updateAnswerx }) => {\n  const [userAnswer, setUserAnswer] = useState(data);\n  console.log(updateAnswerx);\n  if (data.length === currentSlide) {\n    return <Results data={userAnswer} />;\n  }\n\n  const { answers, question } = data[currentSlide];\n\n  const Answers = () => {\n    const updateAnswer = (index) => {\n      const newObj = [...data];\n      data[currentSlide].answer = index;\n      setUserAnswer(newObj);\n    };\n\n    return (\n      <ul>\n        {answers.map((answer, index) => (\n          <li\n            className={`choice ${\n              userAnswer[currentSlide].answer === index ? \"selected\" : \"\"\n            }`}\n            onClick={() => updateAnswer(index)}\n            key={index}\n          >\n            {answer}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div className=\"slide\">\n      <h3>{question}</h3>\n      <Answers />\n    </div>\n  );\n};\n\nexport default Slide;\n"]},"metadata":{},"sourceType":"module"}
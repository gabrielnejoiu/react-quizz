{"ast":null,"code":"var _jsxFileName = \"/Users/gab/Desktop/Projects/tutorial/starter/src/index.js\";\nimport { React, useState, useEffect, useReducer } from \"react\";\nimport ReactDom from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"This is my app\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n  useEffect(() => {\n    let cleanIt = true;\n    setTimeout(() => {\n      if (cleanIt) {\n        console.log(\"a\");\n        setIsLoading(false);\n      }\n    }, 5000);\n    return () => {\n      cleanIt = false;\n      console.log(\"b\");\n    };\n  }, []);\n};\n\nReactDom.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/gab/Desktop/Projects/tutorial/starter/src/index.js"],"names":["React","useState","useEffect","useReducer","ReactDom","App","isLoading","setIsLoading","cleanIt","setTimeout","console","log","render","document","getElementById"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,OAAO,GAAG,IAAd;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAID,OAAJ,EAAa;AACXE,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KALS,EAKP,IALO,CAAV;AAMA,WAAO,MAAM;AACXC,MAAAA,OAAO,GAAG,KAAV;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACD,KAHD;AAID,GAZQ,EAYN,EAZM,CAAT;AAaD,CAjBD;;AAmBAP,QAAQ,CAACQ,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import { React, useState, useEffect, useReducer } from \"react\";\nimport ReactDom from \"react-dom\";\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  return <div>This is my app</div>;\n\n  useEffect(() => {\n    let cleanIt = true;\n    setTimeout(() => {\n      if (cleanIt) {\n        console.log(\"a\");\n        setIsLoading(false);\n      }\n    }, 5000);\n    return () => {\n      cleanIt = false;\n      console.log(\"b\");\n    };\n  }, []);\n};\n\nReactDom.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}